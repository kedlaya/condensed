<section xml:id="sec_solid1a">
  <title>Solid abelian groups</title>
  <introduction>
    <p>
      Since solid <m>R</m>-modules for any commutative ring <m>R</m> can be viewed as <m>R</m>-module objects in the category of solid abelian groups
      (<xref ref="rem-solid-R-modules-as-solid-Z-modules"/>),
      it makes sense to study the category of solid abelian groups in more detail, in part to demystify the construction.
    </p>
    <p>
      To simplify notation, let us define <m>\Ab_\solid</m> as a synonym for <m>\Mod_{\ZZ_\solid}</m>, the category of soild abelian groups.
    </p>
    <paragraphs>
      <title>Reference</title>
      <p>
        <xref ref="subsec-whitehead"/> is taken from <xref ref="bib-Clausen-Scholze-youtube"/>, Lecture 1.
        <xref ref="subsec-solid-finiteness"/> is taken from <xref ref="bib-Clausen-Scholze-youtube"/>, Lecture 6.
      </p>
    </paragraphs>
  </introduction>
  <subsection>
    <title>Solid abelian groups as topological groups</title>
    <p>
      We insert a remark to help justify why we set up the theory of solid abelian groups as we did.
    </p>
    <remark xml:id="rem-compare-solid-to-top-ab-group">
      <p>
        The category <m>\Ab_\solid</m> was custom-built to enforce the relation <xref ref="eq-formula-for-solid-module"/>.
        However, there is another context in which such a relation occurs more naturally: in the category <m>\TopAb</m> of topological abelian groups.
      </p>
      <p>
        Let us spell this out in some detail. Start with <m>\ZZ</m> viewed as a discrete topological abelian group.
        The product <m>\prod_I \ZZ</m> is topologized as follows: one gets a neighborhood basis of open subsets by choosing an arbitrary finite subset <m>I_0 \subseteq I</m>
        and taking the preimage of an open subset under the projection <m>\prod_I \ZZ \to \prod_{I_0} \ZZ</m>. Since a finite product of copies of <m>\ZZ</m> is again discrete,
        every singleton set in the finite product is open; hence the neighborhood basis consists of subsets consisting of tuples with a fixed value in some finite set of coordinates
        and arbitrary values elsewhere.
      </p>
      <p>
        Now consider a continuous map <m>\prod_I \ZZ \to \ZZ</m> of topological abelian groups. The inverse image of 0 must be open in <m>\prod_I \ZZ</m>, and contains the zero tuple,
        so for some finite subset <m>I_0 \subseteq I</m> it must contain the whole kernel of <m>\prod_I \ZZ \to \prod_{I_0} \ZZ</m>. But that makes the map a finite sum of coordinate
        projections; we conclude that
        <me>
          \Hom_{\TopAb}\left(\prod_I \ZZ, \ZZ\right) = \bigoplus_I \ZZ
        </me>
        and similarly
        <me>
          \Hom_{\TopAb}\left(\prod_I \ZZ, \prod_J \ZZ\right) = \prod_J \bigoplus_I \ZZ
        </me>.
        This formally implies (by taking colimits) that there is a functor <m>\Ab_\solid \to \TopAb</m> taking <m>\prod_I \ZZ_\solid</m> to <m>\prod_I \ZZ</m>.
      </p>
      <p>
        However, this functor is not <em>fully</em> faithful because of the deleterious effect of taking colimits on underlying topological spaces
        (e.g., see <xref ref="exa-solid-modules-with-underlying-zero"/>).
        This can be corrected by replacing the category of topological abelian groups with the category of condensed abelian groups <xref ref="prop-solid-vs-presumptively-solid"/>,
        in which cokernels behave more like in <m>\Ab_\solid</m>. This also will make the construct compatible with tensor products, which do not make sense in <m>\TopAb</m>.
      </p>
    </remark>
    <example xml:id="exa-solid-modules-with-underlying-zero">
      <p>
        In <m>\Ab_\solid</m>, the object <m>\ZZ_\solid[T]</m> is the functor <m>\prod_I \ZZ_\solid \mapsto \left( \prod_I \ZZ \right)[T]</m>.
        We also have an object <m>\ZZ_\solid \langle T \rangle</m> which is the functor <m>\prod_I \ZZ_\solid \mapsto \prod_I \ZZ[T]</m>.
        The cokernel of the obvious map <m>\ZZ_\solid[T] \to \ZZ_\solid \langle T \rangle</m> is an object of <m>\Ab_solid</m>
        whose restriction to <m>\Ab</m> is zero, but which is not the zero object.
      </p>
    </example>
  </subsection>
  <subsection xml:id="subsec-whitehead">
    <title>Whitehead's problem for solid abelian groups</title>
    <remark>
      <p>
        The <term>Whitehead problem</term> asks whether every abelian group <m>A</m> with <m>\Ext^1_{\ZZ}(A, \ZZ) = 0</m> is free.
        It was shown by Shelah that this statement is in fact independent of the axioms of set theory (ZFC, or even ZFC plus the 
        continuum hypothesis).
      </p>
      <p>
        One interesting side effect of the fact that the passage to solid modules gives us a meaningful duality between infinite
        products and coproducts is that the analogue of Whitehead's problem is easily resolved! 
      </p>
    </remark>
    <lemma xml:id="lem-submodule-free-over-PID">
      <statement>
        <p>
          Any submodule of a free module (of arbitrary rank, possibly infinite or even uncountable) over a principal ideal domain is itself free (of the same or smaller rank).
        </p>
      </statement>
      <proof>
        <p>
          See <xref ref="bib-Rotman"/>, Theorem B-2.28.
        </p>
      </proof>
    </lemma>
    <proposition xml:id="prop-Whitehead-for-solid">
      <title>Whitehead's problem for solid modules</title>
      <statement>
        Let <m>A</m> be a <m>\ZZ</m>-module of cardinality <m>\leq \kappa</m>
        such that <m>\iExt^1_{\ZZ_\solid}(A_{\solid}, \ZZ_\solid) = 0</m>.
        Then <m>A</m> is a free module.
      </statement>
      <proof>
        <p>
          Since <m>\ZZ</m> is a principal ideal domain, using <xref ref="lem-submodule-free-over-PID"/> we may construct a free resolution of <m>A</m> of length 1:
          <men xml:id="eq-free-res-whitehead">
            0 \to \bigoplus_I \ZZ \to \bigoplus_J \ZZ \to A \to 0
          </men>.
          We may further ensure that <m>|I|, |J| \leq \kappa</m>.
        </p>
        <p>
          By <xref ref="prop-solidification-is-exact"/>, this remains exact under solidification:
          <me>
            0 \to \bigoplus_I \ZZ_\solid \to \bigoplus_J \ZZ_\solid\to A_{\solid} \to 0
          </me>.
          Applying <m>\iHom_{\ZZ_\solid}(\bullet, \ZZ_\solid)</m> and using our hypothesis, we obtain
          <me>
            0 \to \iHom_{\ZZ_\solid}(A_{\solid}, \ZZ_{\solid}) \to \prod_J \ZZ_{\solid} \to \prod_I \ZZ_{\solid} \to \iExt^1_{\ZZ_\solid}(A_{\solid}, \ZZ_{\solid}) = 0
          </me>.
          This splits because <m>\prod_I \ZZ_{\solid}</m> is projective (here we diverge from the classical setting).
          Consequently, applying <m>\iHom_{\ZZ_\solid}(\bullet, \ZZ_\solid)</m> again yields another split exact sequence:
          <me>
            0 \to \bigoplus_I \ZZ_{\solid} \to \bigoplus_J \ZZ_{\solid} \to A_{\solid} \to 0
          </me>.
          Since solidification is fully faithful, this implies that our free resolution <xref ref="eq-free-res-whitehead"/> is itself split. 
          Hence <m>A</m> is a submodule of a free module, and hence free by <xref ref="lem-submodule-free-over-PID"/> again.
        </p>
      </proof>
    </proposition>
  </subsection>
  <subsection xml:id="subsec-solid-finiteness">
    <title>Finiteness conditions</title>
    <p>
      To illustrate that one can really work with the solid modules despite the somewhat abstract definition,
      we prove a <q>coherence</q> property for <m>\ZZ_\solid</m> analogous to the structure of finitely generated abelian groups.
    </p>
    <definition>
      <p>
        An object <m>M \in \Ab_\solid</m> is <term>finitely generated</term> if it can be written as a quotient of <m>\prod_I \ZZ_\solid</m>
        for some <m>I</m> with <m>|I| \leq \kappa</m>.
        (It is not necessarily to allow a finite product of copies of <m>\prod_I \ZZ_\solid</m> because this is again a product of the same form.)
        The object <m>M</m> is <term>finitely presented</term> if it occurs as the cokernel of some morphism <m>\prod_J \ZZ_\solid \to \prod_I \ZZ_\solid</m>.
      </p>
    </definition>
    <lemma xml:id="lem-hom-from-torsion-vanishes">
      <statement>
        <p>
          Let <m>Q</m> be a torsion <m>\ZZ</m>-module.
          Then <m>\iHom_{\ZZ_\solid}(Q_\solid, \ZZ_\solid) = 0</m>.
        </p>
      </statement>
      <proof>
        <p>
          It suffices to compute the evaluation on <m>\prod_I \ZZ_\solid</m> for <m>I</m> at most countable:
          using Hom-tensor adjunction plus <xref ref="eq-solid-internal-hom"/>, we obtain
          <md>
            <mrow>
              \iHom_{\ZZ_\solid}(Q_\solid, \ZZ_\solid)\left( \prod_I \ZZ_\solid \right) &amp;= 
              \Hom_{\ZZ_\solid}\left(\prod_I \ZZ_\solid, \iHom_{\ZZ_\solid}(Q_\solid, \ZZ_\solid)\right)
            </mrow>
            <mrow>
            &amp; =  \Hom_{\ZZ_\solid}\left(\prod_I \ZZ_\solid \otimes_{\ZZ_\solid} (Q_\solid), \ZZ_\solid\right)
            </mrow>
            <mrow>
            &amp; = \Hom_{\ZZ_{\solid}}(Q_\solid, \iHom_{\ZZ_\solid}\left(\prod_I \ZZ_\solid, \ZZ_\solid\right))
            </mrow>
            <mrow>
            &amp; = \Hom_{\ZZ_{\solid}}\left(Q_\solid, \bigoplus_I \ZZ_\solid\right)
            </mrow>
            <mrow>
             &amp; = \Hom_{\ZZ}\left(Q, \bigoplus_I \ZZ\right) = 0
            </mrow>
          </md>
          where the last term vanishes because <m>Q</m> is torsion. 
          (We will see another proof later in the language of condensed abelian groups; see <xref ref="rem-hom-from-torsion-vanishes-condensed"/>.)
        </p>
      </proof>
    </lemma>
    <proposition xml:id="lem-subobject-of-finitely-generated">
      <statement>
        <p>
          For any <m>I</m> with <m>|I| \leq \kappa</m>,
          any finitely generated subobject of <m>\prod_I \ZZ_\solid</m> is itself a product of copies of <m>\ZZ_\solid</m>. 
        </p>
      </statement>
      <proof>
        <p>
          Let <m>M</m> be a finitely generated subobject of <m>\prod_I \ZZ_\solid</m>. By definition, it sits in a sequence
          <men xml:id="eq-sandwich-free-module">
            \prod_J \ZZ_\solid \to M \to \prod_I \ZZ_\solid
          </men>
          where the first map is surjective and the second map is injective.
        </p>
        <p>
          Let <m>g\colon \prod_J \ZZ_\solid \to \prod_I \ZZ_\solid</m> be the composition.
          By taking duals (<xref ref="prop-solid-internal-hom"/>), we get a map <m>h \colon \bigoplus_I \ZZ \to \bigoplus_J \ZZ</m>;
          note that we are now considering <em>discrete</em> <m>\ZZ</m>-modules, so we may write <m>\ZZ</m> instead of <m>\ZZ_\solid</m>
          and reason in terms of discrete <m>\ZZ</m>-modules.
        </p>
        <p>
          By <xref ref="lem-submodule-free-over-PID"/>, <m>\ima(h)</m> is also a free <m>\ZZ</m>-module, so the source
          <m>\bigoplus_I \ZZ</m> splits as <m>\ker(h)</m> plus a submodule isomorphic to <m>\ima(h)</m>, and both factors are free.
          This splitting transposes to a decomposition of the target <m>\prod_I \ZZ_\solid</m> as a product into two factors,
          each itself a product of copies of <m>\ZZ_\solid</m>. The point is that we can replace the target <m>\prod_I \ZZ_\solid</m> with a smaller
          target (discarding the dual of <m>\ker(h)</m>) in such a way that <m>M</m> still embeds as a subobject, but the map <m>h</m> is now injective.
        </p>
        <p>
          Set <m>Q := \coker(h)</m>. Let <m>\overline{Q}</m> be the quotient of <m>Q</m> by its torsion subgroup; by
          <xref ref="lem-submodule-free-over-PID"/> again, <m>\overline{Q}</m> is again a free <m>\ZZ</m>-module,
          so the target <m>\bigoplus_J \ZZ</m> admits a splitting with <m>\overline{Q}</m> as a direct summand.
          This now transposes to a decomposition of the source <m>\prod_J \ZZ_\solid</m> as a product into two factors,
          each itself a product of copies of <m>\ZZ_\solid</m>, and we can replace the source with one of these factors
          (discarding the dual of <m>\overline{Q}</m>) in such a way that we now have a new sequence as in <xref ref="eq-sandwich-free-module"/>, but
          now <m>Q</m> is a torsion <m>\ZZ</m>-module.
        </p>
        <p>
          Now dualizing the sequence
          <men xml:id="eq-length-1-resolution-of-solid">
            0 \to \bigoplus_I \ZZ \stackrel{h}{\to} \bigoplus_J \ZZ \to Q \to 0
          </men>
          and invoking <xref ref="lem-hom-from-torsion-vanishes"/> yields
          <men xml:id="eq-hom-from-torsion-sequence">
            0 = \iHom_{\ZZ_\solid}(Q_\solid, \ZZ_\solid) \to \prod_J \ZZ_\solid \stackrel{g}{\to} \prod_I \ZZ_\solid
          </men>.
          At this point, we know that in <xref ref="eq-sandwich-free-module"/>, the first map is surjective, the second map is injective,
          and the composition is also injective. Consequently the first map <m>\prod_I \ZZ_\solid \to M</m> is an isomorphism, proving the claim.
        </p>
      </proof>
    </proposition>
    <corollary xml:id="cor-length-1-resolution-of-solid">
      <statement>
        <p>
          Any finitely presented solid <m>\ZZ</m>-module is a cokernel of some <em>injective</em> map of the form <m>\prod_J \ZZ_\solid \to \prod_I \ZZ_\solid</m>.
        </p>
      </statement>
      <proof>
        <p>
          This follows immediately from <xref ref="lem-subobject-of-finitely-generated"/>: given any surjection <m>\prod_I \ZZ_\solid \to M</m>,
          the kernel is itself isomorphic to <m>\prod_J \ZZ_\solid</m> for some <m>J</m>.
        </p>
      </proof>
    </corollary>
    <corollary>
      <statement>
        <p>
          Any finitely presented solid <m>\ZZ</m>-module is a product of some copies of <m>\ZZ_\solid</m> by
          <m>\iExt^1_{\ZZ_\solid}(Q_\solid, \ZZ_\solid)</m> for some torsion <m>\ZZ</m>-module <m>Q</m>.
        </p>
      </statement>
      <proof>
        <p>
          Consider an exact sequence of the form
          <me>
            \prod_J \ZZ_\solid \stackrel{g}{\to} \prod_I \ZZ_\solid \to M \to 0
          </me>.
          In the first step of the proof of <xref ref="lem-subobject-of-finitely-generated"/>, 
          we split <m>\prod_I \ZZ_\solid</m> and discard a factor to which <m>\prod_J \ZZ_\solid</m> maps as zero.
          This factor projects injectively to <m>M</m>, so we end up splitting off a direct summand of <m>M</m> which is a product of copies of <m>\ZZ_\solid</m>.
        </p>
        <p>
          We then split <m>\prod_J \ZZ_\solid</m> to ensure that the transpose of the map <m>g</m> has torsion cokernel <m>Q</m>.
          At this point, the sequence <xref ref="eq-hom-from-torsion-sequence"/> continues
          <me>
            0 \to \prod_J \ZZ_\solid \stackrel{g}{\to} \prod_I \ZZ_\solid \to \iExt^1_{\ZZ_\solid}(Q_\solid, \ZZ_\solid) \to \iExt^1_{\ZZ_\solid}(\prod_J \ZZ_\solid, \ZZ_\solid) = 0
          </me>
          where the last term vanishes because <m>\prod_I \ZZ_\solid</m> is projective in <m>\Mod_{\ZZ_\solid}</m>.
          We conclude that our original <m>M</m> splits as a product of copies of <m>\ZZ_\solid</m> plus <m>\iExt^1_{\ZZ_\solid}(Q_\solid, \ZZ_\solid)</m>, as claimed.
        </p>
      </proof>
    </corollary>
    <proposition>
      <statement>
        <p>
          The finitely presented objects in <m>\Ab_\solid</m> form a subcategory closed under kernels, cokernels, and extensions.
          Moreover, every object of <m>\Ab_\solid</m> is a colimit of finitely presented objects.
        </p>
      </statement>
      <proof>
        <p>
          The only point which is not formal is stability under kernels; this follows from <xref ref="lem-subobject-of-finitely-generated"/>.
        </p>
      </proof>
    </proposition>
    <remark>
      <p>
        One can prove similar results with <m>\ZZ_\solid</m> replaced by an algebra of finite type over <m>\ZZ_\solid</m>.
        See <xref ref="bib-Clausen-Scholze-youtube"/>, Lecture 11, timestamp 24:30.
      </p>
    </remark>
  </subsection>
</section>